---
title: "Global Listening Project"
format: pdf
editor: visual
author:
 - name: Alexander Miles
   affiliations:
     - id: University of Southern California
 - name: Jeremy Miles
   affiliations:
      - id: Google
 - name: GLP Project Team
date: today
echo: false  # Hides code by default for all chunks
---

```{r warning = FALSE, message = FALSE}

library(dplyr)
library(foreign)
library(ggplot2)
library(haven)


# Download the .sav file from the URL
url <- "https://github.com/jeremymiles/glp/blob/main/Global%20Listening%20Project%20-%20Final%20Data.sav?raw=true"
download.file(url, destfile = "Global_Listening_Project_Final_Data.sav", mode = "wb")

# Read the .sav file using haven
# Want to use foreign, as it keeps factor labels. Foreign can't read from the url, unclear why. Fix is to load with haven, write sav file, and read that with foreign
data_haven <- haven::read_sav("Global_Listening_Project_Final_Data.sav")

# Save the data as a .sav file in a format compatible with foreign
write_sav(data_haven, "Compatible_Final_Data.sav")

# Now read the newly saved .sav file using foreign
suppressWarnings({
  orig_dat <- foreign::read.spss("Compatible_Final_Data.sav", 
                          to.data.frame = TRUE) 
})

# Removing data_haven from R environment
rm(data_haven)
```

```{r}


dat <- orig_dat
names(dat) <- tolower(names(dat)) 
dat <- dat %>% dplyr::mutate(
  global_region = as.character(global_region),
  gender = as.character(gender),
  gender = ifelse(gender %in% c("Male", "Female"), gender, NA),
  youth = age_group == "18-24 years old",
  youth = ifelse(youth, "Age 18-24", "Age25+"),
  Region = as.character(region), 
  country = as.character(country))

```


### Function to create the Graphs
```{r}
#| fig-width: 9
#| fig-height: 10

TrustGraphs <- function(varq, var_label) {
  dat$var <- dat[[varq]]
  
  #Create summary by for all countries
  summary_dat <- dat %>% 
    dplyr::filter(var != "Don't know/ Refused") %>%
    dplyr::group_by(var, youth) %>% 
    dplyr::summarise(n = dplyr::n()) %>% 
    dplyr::group_by(youth) %>% 
    dplyr::mutate(tot = sum(n), prop = n / tot) %>%
    dplyr::ungroup()
  
  t1 <- summary_dat %>%
    dplyr::select(var, youth, prop) %>%
    dplyr::mutate(prop = round(prop, 2)) %>%
    tidyr::pivot_wider(
      names_from = youth, values_from = prop
      ) %>%
    dplyr::rename(Likelihood = var)

  names(t1)[[1]] <- var_label
  
  # plot for all countries
  p1 <- summary_dat %>%
    ggplot2::ggplot(aes(x = youth, y = prop, fill = var)) +
    ggplot2::geom_bar(stat = "identity") + 
    ggplot2::geom_text(aes(label = scales::percent(prop, accuracy = 1)), 
                       position = ggplot2::position_stack(vjust = 0.5)) +
    ylab(glue::glue("Proportion ", var_label)) +
    xlab("Age Group") + 
    labs(fill = "Likelihood of Trust") +
    ggtitle(glue::glue(var_label, ": all countries")) +
    theme(axis.text.x=element_text(angle=90, hjust=1))
  
  summary_country_dat <- dat %>% 
    dplyr::filter(var != "Don't know/ Refused") %>%
    dplyr::group_by(var, youth, country) %>% 
    dplyr::summarise(n = dplyr::n()) %>% 
    dplyr::group_by(youth, country) %>% 
    dplyr::mutate(tot = sum(n), prop = n / tot) 
  
  
  
  t2 <- summary_country_dat %>%
    dplyr::select(var, youth, prop, country) %>%
    dplyr::mutate(prop = round(prop, 2)) %>%
    tidyr::pivot_wider(
      names_from = youth, values_from = prop
      ) %>%
    dplyr::rename(Likelihood = var) %>%
    dplyr::arrange(country)

  names(t2)[[1]] <- var_label
  
  p2 <- summary_country_dat %>%
    ggplot2::ggplot(aes(x = youth, y = prop, fill = var)) +
    ggplot2::geom_bar(stat = "identity") +
    facet_wrap(~country) + 
    ylab(glue::glue("Proportion ", var_label)) +
    xlab("Age Group") + 
    labs(fill = "Likelihood of Trust") +
    ggtitle(var_label) +
    theme(axis.text.x=element_text(angle=90, hjust=1))
  
  country_plots <- dat %>%
    dplyr::filter(var != "Don't know/ Refused") %>%
    dplyr::group_by(var, youth, country) %>%
    dplyr::summarise(n = dplyr::n()) %>%
    dplyr::group_by(youth, country) %>%
    dplyr::mutate(tot = sum(n), prop = n / tot) %>%
    dplyr::ungroup() %>%
    split(., .$country) %>%
    lapply(function(x) {
      ggplot2::ggplot(x, aes(x = youth, y = prop, fill = var)) +
        ggplot2::geom_bar(stat = "identity") +
        ylab(glue::glue("Proportion ", var_label)) +
        xlab("Age Group") +
        labs(fill = "Likelihood of Trust") +
        ggtitle(glue::glue(var_label, ": ", unique(x$country))) +
         ggplot2::geom_text(aes(label = scales::percent(prop, accuracy = 1)), 
                       position = ggplot2::position_stack(vjust = 0.5)) +
        theme(axis.text.x=element_text(angle=90, hjust=1))
    })
  
  return(list(p1 = p1, 
              p2 = p2, 
              t1 = t1, 
              t2 = t2, 
              country_plots = country_plots))
} 



```



## A1
Trust in Media for Sources of Information

Imagine there was an emerging crisis in your country that you were very concerned about and wanted to learn more about (for example, a flood, pandemic, or food/water shortages). How likely would you be to trust the following sources to give you the most accurate, truthful information?

```{r}
 

trust_vars <- paste0("a1_", 1:13)
trust_sources <- 
  c("National TV",
    "Local TV",
    "National Radio",
    "Local Radio",
    "International TV",
    "International Radio",
    "National Print Media",
    "Local Print Media",
    "Word of mouth",
    "Govt Communication",
    "Social Media",
    "Internet",
    "Messaging Platforms")

# Set dplyr option to suppress group by messages
options(dplyr.summarise.inform = FALSE)

list_graphs_A1 <- 
  lapply(1:13, function(x) {
    TrustGraphs(var = trust_vars[[x]], var_label = trust_sources[x])
  })


for(i in 1:length(list_graphs_A1)) {
  list_graphs_A1[[i]]$t1 %>% knitr::kable() %>% print()
  list_graphs_A1[[i]]$p1 %>% print()
  list_graphs_A1[[i]]$t2 %>% 
    dplyr::arrange(country) %>% 
    knitr::kable() %>% print()
  list_graphs_A1[[i]]$p2 %>% print()
  cat('\\newpage')
}


```

## Trust in Individuals

Again, thinking about an emerging crisis in your country that you were very concerned about and wanted to learn more about (for example, a flood, pandemic, or food/water shortages). Who would you likely turn to for information?

```{r}
#| fig-width: 9
#| fig-height: 10

rm(trust_vars)
rm(trust_sources)
trust_vars <- paste0("a2_", 1:13)
trust_sources <- 
  c("Family members",
    "Religious leaders",
    "Community leaders",
    "Friends",
    "Social media influencers",
    "Local politicians",
    "Government and political leaders",
    "Local Print Media",
    "Journalists",
    "NGOs / CSOs",
    "International Authorities",
    "Family doctor / healthcare",
    "Scientists")

list_graphs_A2 <- lapply(1:13, function(x) {
  TrustGraphs(var = trust_vars[[x]], var_label = trust_sources[x])
})

for(i in 1:length(list_graphs_A2)) {
  list_graphs_A2[[i]]$t1 %>% knitr::kable() %>% print()
  list_graphs_A2[[i]]$p1 %>% print()
  list_graphs_A2[[i]]$t2 %>% 
    dplyr::arrange(country) %>% 
    knitr::kable() %>% print()
  list_graphs_A2[[i]]$p2 %>% print()
  cat('\\newpage')
}


```




# Section B: Trust
## B2

Imagine there was a major crisis (for example, a flood, pandemic, or food/water shortages).
To what extent would you trust the following people or groups of people to act in your best
interest?
```{r}
#| fig-width: 9
#| fig-height: 10
rm(trust_vars)
rm(trust_sources)

trust_vars <- paste0("b2_", 1:10)
trust_sources <-
  c("My neighbours",
    "Scientists or other experts",
    "Celebrities and social influencers",
    "Religious leaders",
    "Community leaders",
    "Political leaders",
    "NGOs or community support organisations",
    "My employer",
    "My family doctor / local health clinic / GP surgery",
    "Family members"
    )

list_graphs_B2 <- lapply(1:10, function(x) {
  TrustGraphs(var = trust_vars[[x]], var_label = trust_sources[x])
})

for(i in 1:length(list_graphs_B2)) {
  list_graphs_B2[[i]]$t1 %>% knitr::kable() %>% print()
  list_graphs_B2[[i]]$p1 %>% print()
  list_graphs_B2[[i]]$t2 %>% 
    dplyr::arrange(country) %>% 
    knitr::kable() %>% print()
  list_graphs_B2[[i]]$p2 %>% print()
  cat('\\newpage')
}

```

## B1
Imagine there was a major crisis (for example, a flood, pandemic, or food/water
shortages). To what extent would you trust the following institutions to act in your best
interest?

```{r}
#| fig-width: 9
#| fig-height: 10
rm(trust_vars)
rm(trust_sources)

trust_vars <- paste0("b1_", 1:3)
trust_sources <-
  c("The government",
    "National health authorities",
    "International organisations (e.g. the UN or WHO)"
    )

list_graphs_B1 <- lapply(1:3, function(x) {
  TrustGraphs(var = trust_vars[[x]], var_label = trust_sources[x])
})

for(i in 1:length(list_graphs_B1)) {
  list_graphs_B1[[i]]$t1 %>% knitr::kable() %>% print()
  list_graphs_B1[[i]]$p1 %>% print()
  list_graphs_B1[[i]]$t2 %>% 
    dplyr::arrange(country) %>% 
    knitr::kable() %>% print()
  list_graphs_B1[[i]]$p2 %>% print()
  cat('\\newpage')
}






```

```{r}

d <- dat

d[d == "Don't know/ Refused"] <- NA

```


# Differences Between Youth and Non-Youth
```{r}

CountryDiff <- function(d, question, country) {
  # Create table showing difference between youth and non-youth responses
  diff_table <- prop.table(table((d[[question]][d$youth == "Age 18-24" & d$country == country]))) - 
              prop.table(table((d[[question]][d$youth == "Age25+"& d$country == country])))
  
  # Get sum of the absolute differences between youth and non-youth
  sum_diff <- sum(abs(diff_table))
  
  return(sum_diff)
}

EachCountryDiff <- function(d, question) {
  # Get unique countries
  countries <- unique(d$country)
  
  # Apply CountryDiff function to each country and store results in a list
  result <- lapply(countries, function(country) CountryDiff(d, question, country))
  
  # Set the names of the list elements to the corresponding country names
  names(result) <- countries
  
  result_df <- data.frame(
    country = names(result),
    discrepancy = unlist(result))
  
  # Removes rownnames
  rownames(result_df) <- NULL
  
  # Sort by discrepancy in descending order
  result_df <- result_df %>% 
    arrange(desc(discrepancy))
  # Assign the results data frame to a variable named discrep_[question]
  assign(paste0("discrep_", question), result_df, envir = .GlobalEnv)
  
  # Return for troubleshooting results
  return(result)
}

# Section A
for (i in 1:13) {
  question <- paste0("a1_", i)
  EachCountryDiff(d, question)
}

for (i in 1:13) {
  question <- paste0("a2_", i)
  EachCountryDiff(d, question)
}

for (i in 1:2) {
  question <- paste0("a3_", i)
  EachCountryDiff(d, question)
}

for (i in 1:1) {
  question <- paste0("a4_", i)
  EachCountryDiff(d, question)
}

for (i in 1:9) {
  question <- paste0("a5_", i)
  EachCountryDiff(d, question)
}

# Section B
for (i in 1:5) {
  question <- paste0("b1_", i)
  EachCountryDiff(d, question)
}

for (i in 1:2) {
  question <- paste0("b2_", i)
  EachCountryDiff(d, question)
}


# Section C
for (i in 1:5) {
  question <- paste0("c1_", i)
  EachCountryDiff(d, question)
}

for (i in 1:9) {
  question <- paste0("c2_", i)
  EachCountryDiff(d, question)
}

for (i in 1:1) {
  question <- paste0("c3_", i)
  EachCountryDiff(d, question)
}

for (i in 1:5) {
  question <- paste0("c4_", i)
  EachCountryDiff(d, question)
}

for (i in 1:1) {
  question <- paste0("c7_", i)
  EachCountryDiff(d, question)
}

for (i in 1:2) {
  question <- paste0("c9_", i)
  EachCountryDiff(d, question)
}


# Section D
for (i in 1:4) {
  question <- paste0("d1_", i)
  EachCountryDiff(d, question)
}


```

# Printing top 10 differences for each country
```{r}
rm(highest_discrep_countries)
highest_discrep_countries <- list()


for (i in 1:13) {
  # Construct object name dynamically
  object_name <- paste0("discrep_a1_", i)
  
  # Retrieve the object using get()
  retrieved <- get(object_name) 
  
  top_5_countries <- retrieved[1:5, 1] 
  highest_discrep_countries[[paste0("a1_", i)]] <- top_5_countries
  
  # Print the formatted table
  print(object_name)
  #print(knitr::kable(retrieved[1:10, ]))
}

for (i in 1:13) {
  object_name <- paste0("discrep_a2_", i)
  
  retrieved <- get(object_name) 
  
  top_5_countries <- retrieved[1:5, 1]
  highest_discrep_countries[[paste0("a2_", i)]] <- top_5_countries
  
  print(object_name)
  #print(knitr::kable(retrieved[1:10, ]))
}

for (i in 1:2) {
  object_name <- paste0("discrep_a3_", i)
  
  retrieved <- get(object_name) 

  top_5_countries <- retrieved[1:5, 1] 
  highest_discrep_countries[[paste0("a3_", i)]] <- top_5_countries
  
  print(object_name)
  #print(knitr::kable(retrieved[1:10, ]))
}

for (i in 1:1) {
  object_name <- paste0("discrep_a4_", i)
  
  retrieved <- get(object_name) 

  print(object_name)
  print(knitr::kable(retrieved[1:10, ]))
}

for (i in 1:5) {
  object_name <- paste0("discrep_a5_", i)
  
  retrieved <- get(object_name) 

  print(object_name)
  print(knitr::kable(retrieved[1:10, ]))
}


country_counts <- table(unlist(highest_discrep_countries)) %>% 
  sort(decreasing = TRUE)


```


## Looking at trust vs. mental health / loneliness during COVID
To gauge trust vs mental health / loneliness, we first look to these important variables:

A1 = "A1. Imagine there was an emerging crisis in your country that you were very concerned about and
wanted to learn more about (for example, a flood, pandemic, or food/water shortages).
How likely would you be to trust the following sources to give you the most accurate, truthful
information?"

B1 = "To what extent would you trust the following institutions to act in your best
interest?"

B2 = "To what extent would you trust the following people or groups of people to act in your best interest?"

C1_1 = "I struggled with feelings of loneliness
and isolation"

C1_6 = "I experienced mental health problems
e.g. anxiety, depression"

For those who experienced loneliness or have the most severe mental health issues, 
it would be helpful to understand who they are trusting,
versus those who are experiencing the least loneliness
```{r}

# Create a variable to classify those with the most severe mental health issues to be TRUE or FALSE
d <- d %>% 
  dplyr::mutate(
    severe_MH = (c1_1 == "Yes" & c1_6 == "Yes")
  )

knitr::kable(prop.table(table((d$severe_MH[d$youth == "Age 18-24"]))))
prop.table(table((d$severe_MH[d$youth == "Age25+"])))
knitr::kable(prop.table(table(d$a1_1[d$severe_MH == TRUE], useNA = "always")))

# Who do the severe MH people trust?
trust_sources <- 
  c("National TV",
    "Local TV",
    "National Radio",
    "Local Radio",
    "International TV",
    "International Radio",
    "National Print Media",
    "Local Print Media",
    "Word of mouth",
    "Govt Communication",
    "Social Media",
    "Internet",
    "Messaging Platforms")
for (i in 1:13) {
  var_name <- paste0("a1_", i)
  result <- table(d[[var_name]][d$severe_MH == TRUE], useNA = "always")
  result_prop <- prop.table(table(d[[var_name]][d$severe_MH == TRUE], useNA = "always")) %>% 
  knitr::kable(col.names = c(trust_sources[i], "Freq"))
  
  last_two <- sum(result[4:5])
  combined <- c(result[1:3], last_two)
  
  # Create the dataframe and assign it to a variable named severe_MH_trust_[var_name]
  temp_df <- data.frame(
    result = c("Very likely", "Likely", "Unlikely", "Don't know/ Refused"),
    frequency = combined,
    proportion = combined / sum(combined)
  )
  
  # Rename the 'result' column to the corresponding trust source
  temp_df <- setNames(temp_df, c(trust_sources[i], "frequency", "proportion"))
  
  assign(paste0("severe_MH_trust_", var_name), temp_df)
  
  print(result_prop) 
}

```






